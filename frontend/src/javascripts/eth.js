// Generated by CoffeeScript 2.1.1
var animation_running = false;
let addresses = [];

class ETH {
    constructor() {
        this.ws = null;
        this.socket = new WebSocket('ws://rawbot.org:8080');
    }

    start(txCb, blockCb) {
        this.socket.addEventListener('message', function (event) {
            let object = JSON.parse(event.data);
            // console.log(object)
            switch (object.event_name) {
                case 'pendingTransactions':
                    let tx = object.event_data;
                    if (addresses.indexOf(tx.to) >= 0 || addresses.indexOf(tx.from) >= 0 || tx.to == "0x2Fa21cbFe29B3202a61C3E1853470DdE5965c856" || tx.from == "0x2Fa21cbFe29B3202a61C3E1853470DdE5965c856") {
                        console.log('Transaction from: ' + tx.from + " to " + tx.to);
                        if (!animation_running) {
                            $('#rawbot_logo').addClass('spinning_animation');
                            animation_running = true;
                        }

                        setTimeout(() => {
                            $('#rawbot_logo').removeClass('spinning_animation');
                            animation_running = false;
                        }, 2000);
                    }

                    setTimeout((function () {
                        let link;
                        let n = this.network_name_field;
                        if (typeof n === "undefined" || n === 'mainnet') {
                            link = 'https://etherscan.io/tx/' + tx.hash;
                        } else {
                            link = 'https://' + n + '.etherscan.io/tx/' + tx.hash;
                        }

                        return typeof txCb === "function" ? txCb({
                            amount: tx.value / 1000000000000000000,
                            fee: tx.gas * tx.gasPrice / 1000000000000000000,
                            link: link,
                            donation: tx.to === this.donationAddress
                        }) : void 0;
                    }), 1000);

                    break;
                case 'newBlockHeaders':
                    return typeof blockCb === "function" ? blockCb({
                        count: object.event_data
                    }) : void 0;
                case 'hopNetworks':
                    $("#network_name").html("(" + object.event_data + ")");
                    this.network_name_field = object.event_data;
                    break;
                case 'updateAddresses':
                    addresses = object.event_data;
                    break;
            }
        });
    }
};